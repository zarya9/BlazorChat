@using System.Net.Http
@using System.Net.Http.Json
@using Fluxor
@using Fluxor.Blazor.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using BlazorAPI
@using BlazorAPI.Components
@using BlazorAPI.Layout
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using BlazorAPI.Data.Fluxor.Auth
@using System.Security.Claims

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IDispatcher Dispatcher
@inject IState<AuthState> AuthState

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <p>Вы не авторизованы для просмотра этой страницы.</p>
                    <button @onclick="RedirectToLogin">Войти</button>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Извините, по этому адресу ничего нет.</p>
            </LayoutView>
        </NotFound>
    </Router>
    <Fluxor.Blazor.Web.StoreInitializer />
</CascadingAuthenticationState>

@code {
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Сначала проверяем сохраненный URL
        var lastUrl = await LocalStorage.GetItemAsync<string>("last_url");
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (!string.IsNullOrEmpty(token) && IsTokenValid(token))
        {
            // Если есть сохраненный URL - используем его
            if (!string.IsNullOrEmpty(lastUrl))
            {
                Console.WriteLine($"Восстановление последнего URL: {lastUrl}");
                Navigation.NavigateTo(lastUrl);
            }
            else
            {
                // Иначе - редирект по роли
                var role = GetUserRoleFromToken(token);
                var defaultPath = role == "Администратор" ? "/users" : "/profile";
                Console.WriteLine($"Перенаправление по роли: {defaultPath}");
                Navigation.NavigateTo(defaultPath);
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }
    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            return jwtToken.ValidTo > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    private string GetUserRoleFromToken(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            return jwtToken.Claims
                .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        }
        catch
        {
            return null;
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}