@page "/movies/details/{Id:int}"
@using BlazorAPI.ApiRequest
@using BlazorAPI.ApiRequest.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject MovieService MovieService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@rendermode RenderMode.InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<style>
    body {
        background-color: #121212;
        color: #ffffff;
        font-family: 'Arial', sans-serif;
    }

    .movie-details-container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
        border-radius: 12px;
        background-color: #1f1f1f;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .movie-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #444444;
    }

    .movie-title {
        font-size: 28px;
        color: #ffffff;
        margin: 0;
        font-weight: bold;
    }

    .movie-info {
        margin-bottom: 20px;
    }

    .info-row {
        display: flex;
        margin-bottom: 15px;
    }

    .info-label {
        width: 150px;
        font-weight: bold;
        color: #ffffff;
    }

    .info-value {
        flex: 1;
        color: #ffffff;
    }

    .description-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #444444;
    }

    .description-text {
        line-height: 1.6;
        color: #ffffff;
    }

    .rating-badge {
        background-color: #4CAF50;
        color: white;
        padding: 5px 10px;
        border-radius: 4px;
        font-weight: bold;
    }

    .button-group {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        border: none;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.3s ease;
    }

    .btn-back {
        background-color: #6c757d;
        color: white;
    }

        .btn-back:hover {
            background-color: #5a6268;
        }

    .btn-edit {
        background-color: #66bb6a;
        color: white;
    }

        .btn-edit:hover {
            background-color: #57a75b;
        }

    .btn-delete {
        background-color: #e53935;
        color: white;
    }

        .btn-delete:hover {
            background-color: #c62828;
        }

    .metadata {
        font-size: 0.9em;
        color: #666;
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #444444;
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    /* Иконки для кнопок */
    .btn-icon {
        width: 16px;
        height: 16px;
    }
</style>

@if (isLoading)
{
    <div class="loading-spinner">
        <p>Загрузка...</p>
    </div>
}
else if (movie == null)
{
    <p>Фильм не найден</p>
}
else
{
    <div class="movie-details-container">
        <div class="movie-header">
            <h1 class="movie-title">@movie.Name</h1>
            <span class="rating-badge">Рейтинг: @movie.Rating.ToString("0.0")</span>
        </div>

        <div class="movie-info">
            <div class="info-row">
                <span class="info-label">Жанр:</span>
                <span class="info-value">@movie.Genre</span>
            </div>
            <div class="info-row">
                <span class="info-label">Дата выхода:</span>
                <span class="info-value">@movie.ReleaseDate.ToShortDateString()</span>
            </div>
        </div>

        <div class="description-section">
            <h3>Описание</h3>
            <p class="description-text">@movie.Description</p>
        </div>

        <div class="button-group">
            <button class="btn btn-back" @onclick="NavigateBack">
                <svg class="btn-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" />
                </svg>
                Назад
            </button>

            @if (isAdmin)
            {
                <button class="btn btn-edit" @onclick="() => NavigateToEdit(movie.Id)">
                    <svg class="btn-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                    </svg>
                    Редактировать
                </button>
                <button class="btn btn-delete" @onclick="() => DeleteMovie(movie.Id)">
                    <svg class="btn-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
                    </svg>
                    Удалить
                </button>
            }
        </div>
    </div>

    <BlazorAPI.Components.ChatComponent MovieId="@movie.Id" />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie movie;
    private bool isLoading = true;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            movie = await MovieService.GetMovieAsync(Id);

            if (movie == null)
            {
                NotificationService.ShowError("Фильм не найден");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            isAdmin = user.IsInRole("Администратор");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Ошибка при загрузке данных: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/movies");
    }

    private void NavigateToEdit(int movieId)
    {
        Navigation.NavigateTo($"/movies/edit/{movieId}");
    }

    private async Task DeleteMovie(int movieId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот фильм?"))
        {
            try
            {
                if (await MovieService.DeleteMovieAsync(movieId))
                {
                    Navigation.NavigateTo("/movies");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError($"Ошибка при удалении фильма: {ex.Message}");
            }
        }
    }
}