@page "/register"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Components.Routing
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Timers

<style>
    body {
        background-color: #121212; /* Темный фон */
        color: #ffffff; /* Белый текст */
        font-family: 'Comic Sans MS', cursive, sans-serif;
    }

    .header {
        background-color: #1f1f1f; /* Темный фон для шапки */
        padding: 20px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #ffffff; /* Белый текст */
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 80vh; /* Высота контейнера, чтобы форма была по центру */
    }

    .login-form {
        background-color: #1f1f1f; /* Темный фон для формы */
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

        .login-form h3 {
            text-align: center;
            margin-bottom: 20px;
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

    .form-control {
        width: 100%;
        padding: 8px;
        background-color: #333333;
        color: #ffffff;
        border: 1px solid #444444;
        border-radius: 4px;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        background-color: #444444;
        color: #ffffff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #555555;
        }

    .alert {
        background-color: #ff4444;
        color: #ffffff;
        padding: 10px;
        border-radius: 4px;
        margin-top: 15px;
        text-align: center;
    }

    .register-link {
        color: #00aaff;
        text-decoration: none;
    }

        .register-link:hover {
            text-decoration: underline;
        }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .notification {
        padding: 10px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        animation: fadeIn 0.5s;
    }

        .notification.success {
            background-color: #4CAF50; /* Зеленый фон для успешных уведомлений */
        }

        .notification.error {
            background-color: #F44336; /* Красный фон для ошибок */
        }

        .notification button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateX(100%);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

<div class="header">
    Проект
</div>

<div class="login-container">
    <div class="login-form">
        <h3>Регистрация</h3>

 <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="email">Почта:</label>
            <Microsoft.AspNetCore.Components.Forms.InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="form-group">
        <label for="name">Имя:</label>
            <Microsoft.AspNetCore.Components.Forms.InputText id="name" class="form-control" @bind-Value="registerModel.Name" />
        <ValidationMessage For="@(() => registerModel.Name)" />
    </div>

    <div class="form-group">
        <label for="description">Описание:</label>
            <Microsoft.AspNetCore.Components.Forms.InputText id="description" class="form-control" @bind-Value="registerModel.Description" />
        <ValidationMessage For="@(() => registerModel.Description)" />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
            <Microsoft.AspNetCore.Components.Forms.InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Загрузка...</span>
        }
        else
        {
            <span>Зарегистрироваться</span>
        }
    </button>
</EditForm>

        

        <div class="mt-3">
            <p>Уже есть аккаунт? <NavLink class="register-link" href="/login">Войдите</NavLink></p>
        </div>
    </div>
</div>

<!-- Компонент уведомлений -->
<div class="notification-container">
    @foreach (var notification in Notifications)
    {
        <div class="notification @notification.Type">
            <span>@notification.Message</span>
            <button @onclick="() => RemoveNotification(notification.Id)">×</button>
        </div>
    }
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;
    private bool isLoading;

    // Список уведомлений
    private List<NotificationService.NotificationModel> Notifications = new List<NotificationService.NotificationModel>();

    protected override void OnInitialized()
    {
        // Подписываемся на события уведомлений
        NotificationService.OnNotificationAdded += HandleNotificationAdded;
    }

    private void HandleNotificationAdded(NotificationService.NotificationModel notification)
    {
        Notifications.Add(notification);
        StateHasChanged();

        // Автоматическое удаление уведомления через 5 секунд
        var timer = new Timer(5000);
        timer.Elapsed += (sender, args) =>
        {
            InvokeAsync(() =>
            {
                RemoveNotification(notification.Id);
                StateHasChanged();
            });
            timer.Dispose();
        };
        timer.Start();
    }

    private void RemoveNotification(Guid id)
    {
        var notification = Notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            Notifications.Remove(notification);
        }
    }

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Создаем HttpClient через фабрику
            var httpClient = HttpClientFactory.CreateClient("UnauthorizedClient");

            // Выполняем запрос
            var response = await httpClient.PostAsJsonAsync("api/UserLogin/Regist", registerModel);

            if (response.IsSuccessStatusCode)
            {
                // Уведомление об успешной регистрации
                NotificationService.ShowSuccess("Регистрация прошла успешно!");

                // Перенаправляем на страницу авторизации
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка:. {errorContent}";
                NotificationService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Произошла ошибка при регистрации.";
            NotificationService.ShowError(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Password { get; set; }
    }
}