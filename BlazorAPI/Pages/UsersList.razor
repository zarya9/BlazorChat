@page "/users"
@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text
@using System.Timers
@using ApiRequest

<style>
    /* Стили для навигационной панели */
    .nav-panel {
        width: 80px;
        background-color: #1f1f1f;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 20px;
    }

    .nav-button {
        background: none;
        border: none;
        color: #ffffff;
        cursor: pointer;
        margin: 10px 0;
        padding: 10px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 60px;
        height: 60px;
    }

        .nav-button:hover {
            background-color: #333333;
        }

        .nav-button.active {
            background-color: #444444;
            border: 2px solid #ffffff;
        }

    .logout-button {
        margin-top: auto;
        margin-bottom: 20px;
    }

    .main-content {
        margin-left: 80px;
        padding: 20px;
    }

    /* Остальные стили */
    body {
        background-color: #121212;
        color: #ffffff;
        font-family: 'Comic Sans MS', cursive, sans-serif;
    }

    .header {
        background-color: #1f1f1f;
        padding: 20px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #ffffff;
    }

    .users-container {
        padding: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #1f1f1f;
        color: #ffffff;
    }

        .table th, .table td {
            border: 1px solid #444444;
            padding: 12px;
            text-align: left;
        }

        .table th {
            background-color: #333333;
            font-weight: bold;
        }

        .table tr:hover {
            background-color: #333333;
        }

    .loading-text {
        text-align: center;
        margin-top: 20px;
    }

    .no-data-text {
        text-align: center;
        margin-top: 20px;
    }

    .login-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

        .login-list li {
            margin: 4px 0;
        }

    .search-container {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        .search-container input {
            padding: 8px;
            margin-right: 10px;
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #444444;
            width: 200px;
        }

        .search-container button {
            padding: 8px 16px;
            background-color: #444444;
            color: #ffffff;
            border: none;
            cursor: pointer;
            margin-right: 10px;
        }

            .search-container button:hover {
                background-color: #555555;
            }

    .action-button {
        padding: 6px 12px;
        margin: 2px;
        background-color: #444444;
        color: #ffffff;
        border: none;
        cursor: pointer;
    }

        .action-button:hover {
            background-color: #555555;
        }

    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .notification {
        padding: 10px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        animation: fadeIn 0.5s;
    }

        .notification.success {
            background-color: #4CAF50;
        }

        .notification.error {
            background-color: #F44336;
        }

        .notification button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateX(100%);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

<div class="nav-panel">
    <button class="nav-button" @onclick="NavigateToHome">
        🏠
    </button>
    <button class="nav-button @(IsProfilePage() ? "active" : "")" @onclick="NavigateToProfile">
        👤
    </button>
    <button class="nav-button @(IsMoviesPage() ? "active" : "")" @onclick="NavigateToMovies">
        🎬
    </button>
    <button class="nav-button @(IsChatsPage() ? "active" : "")" @onclick="NavigateToChats">
        💬
    </button>
    <button class="nav-button logout-button" @onclick="Logout">
        🔒
    </button>
</div>

<div class="main-content">
    <div class="header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>Проект</span>
        </div>
    </div>

    <div class="users-container">
        <h3>Список пользователей</h3>

        <div class="search-container">
            <input type="text" @bind="searchUserId" @oninput="OnInputSearchUserId" placeholder="Введите ID пользователя" />
            <button @onclick="SearchUserById">Найти</button>
            <button class="reset-button" @onclick="ResetUserList">Сбросить</button>
        </div>

        @if (isLoading)
        {
            <p class="loading-text">Загрузка...</p>
        }
        else if (users == null || !users.Any())
        {
            <p class="no-data-text">Нет данных о пользователях.</p>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-text">@errorMessage</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Имя</th>
                        <th>Описание</th>
                        <th>Роль</th>
                        <th>Логины</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>
                                @if (user.Name == currentUserName)
                                {
                                    @user.Name <span>(Вы★)</span>
                                }
                                else
                                {
                                    @user.Name
                                }
                            </td>
                            <td>@user.Description</td>
                            <td>@user.Role</td>
                            <td>
                                <ul class="login-list">
                                    @if (user.Logins != null)
                                    {
                                        @foreach (var login in user.Logins)
                                        {
                                            <li>@login</li>
                                        }
                                    }
                                    else
                                    {
                                        <li>Нет логинов</li>
                                    }
                                </ul>
                            </td>
                            <td>
                                @if (user.Role != "Администратор")
                                {
                                    <button class="action-button" @onclick="() => ChangeUserRole(user.Id)">Изменить роль</button>
                                    <button class="action-button" @onclick="() => DeleteUser(user.Id)">Удалить</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<div class="notification-container">
    @foreach (var notification in Notifications)
    {
        <div class="notification @notification.Type">
            <span>@notification.Message</span>
            <button @onclick="() => RemoveNotification(notification.Id)">×</button>
        </div>
    }
</div>

@code {
    private List<UserDto> users = new List<UserDto>();
    private bool isLoading = true;
    private bool isAdmin = false;
    private string searchUserId;
    private string currentUserName;
    private string currentUserRole;
    private string errorMessage;

    private List<NotificationService.NotificationModel> Notifications = new List<NotificationService.NotificationModel>();

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationAdded += HandleNotificationAdded;
    }

    private void HandleNotificationAdded(NotificationService.NotificationModel notification)
    {
        Notifications.Add(notification);
        StateHasChanged();

        var timer = new Timer(5000);
        timer.Elapsed += (sender, args) =>
        {
            InvokeAsync(() =>
            {
                RemoveNotification(notification.Id);
                StateHasChanged();
            });
            timer.Dispose();
        };
        timer.Start();
    }

    private void RemoveNotification(Guid id)
    {
        var notification = Notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            Notifications.Remove(notification);
        }
    }

    private bool IsProfilePage()
    {
        return Navigation.Uri.EndsWith("/profile");
    }

    private bool IsMoviesPage()
    {
        return Navigation.Uri.EndsWith("/movies");
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private void NavigateToMovies()
    {
        try
        {
            Navigation.NavigateTo("/movies");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при перенаправлении: {ex.Message}");
        }
    }

    private void NavigateToChats()
    {
        try
        {
            Navigation.NavigateTo("/chats");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при перенаправлении: {ex.Message}");
        }
    }

    private bool IsChatsPage()
    {
        return Navigation.Uri.EndsWith("/chats");
    }

    private void OnInputSearchUserId(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        if (string.IsNullOrEmpty(input))
        {
            searchUserId = string.Empty;
            return;
        }

        var cleanedInput = new string(input.Where(char.IsDigit).ToArray());
        searchUserId = cleanedInput;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Console.WriteLine("Начало выполнения OnInitializedAsync...");

        var token = await LocalStorage.GetItemAsync<string>("authToken");
        Console.WriteLine($"Токен из LocalStorage: {token}");

        if (string.IsNullOrEmpty(token) || !IsTokenValid(token))
        {
            Console.WriteLine("Токен отсутствует или истек. Попытка обновления...");
            token = await RefreshTokenAsync();

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Не удалось обновить токен. Перенаправление на страницу входа.");
                Navigation.NavigateTo("/login");
                return;
            }
        }

        currentUserName = GetUserNameFromToken(token);
        currentUserRole = GetUserRoleFromToken(token);
        Console.WriteLine($"Текущий пользователь: {currentUserName}, Роль: {currentUserRole}");

        switch (currentUserRole)
        {
            case "Администратор":
                Console.WriteLine("Пользователь является администратором.");
                await LoadUsers();
                break;

            case "Обычный пользователь":
                Console.WriteLine("Пользователь является обычным пользователем. Перенаправление на страницу профиля.");
                Navigation.NavigateTo("/profile");
                break;

            default:
                Console.WriteLine($"Роль '{currentUserRole}' не распознана. Перенаправление на главную страницу.");
                Navigation.NavigateTo("/");
                break;
        }

        Console.WriteLine("Завершение выполнения OnInitializedAsync.");
    }

    private string GetUserNameFromToken(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var userName = jwtToken.Claims
                .FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;

            return userName;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при чтении имени пользователя из токена: " + ex.Message);
            return null;
        }
    }

    private string GetUserRoleFromToken(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var role = jwtToken.Claims
                .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

            return role;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при чтении роли из токена: " + ex.Message);
            return null;
        }
    }

    private bool IsTokenValid(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var expirationDate = jwtToken.ValidTo;
        return expirationDate > DateTime.UtcNow;
    }

    private async Task<string> RefreshTokenAsync()
    {
        var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");
        var response = await Http.PostAsJsonAsync("api/Auth/RefreshToken", new { RefreshToken = refreshToken });

        if (response.IsSuccessStatusCode)
        {
            var newToken = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("authToken", newToken);
            return newToken;
        }
        else
        {
            Console.WriteLine("Ошибка при обновлении токена.");
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("refreshToken");
            Navigation.NavigateTo("/login");
            return null;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            Console.WriteLine("Начало загрузки пользователей...");

            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Console.WriteLine($"Токен: {token}");
            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.GetAsync("api/UserLogin/GetAllUsers");
            Console.WriteLine($"Статус ответа: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Тело ответа: {responseContent}");

                users = await response.Content.ReadFromJsonAsync<List<UserDto>>() ?? new List<UserDto>();
                Console.WriteLine($"Загружено пользователей: {users.Count}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Ошибка при загрузке пользователей: {response.StatusCode}. {errorContent}");
                users = new List<UserDto>();
                NotificationService.ShowError("Ошибка при загрузке пользователей.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при загрузке пользователей: " + ex.Message);
            users = new List<UserDto>();
            NotificationService.ShowError("Ошибка при загрузке пользователей.");
        }
        finally
        {
            isLoading = false;
            Console.WriteLine("Загрузка завершена. isLoading = false");
            StateHasChanged();
        }
    }

        private async Task SearchUserById()
        {
            if (int.TryParse(searchUserId, out int userId))
            {
                try
                {
                    isLoading = true;
                    errorMessage = string.Empty;
                    StateHasChanged();
                    var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
                    var response = await httpClient.GetAsync($"api/UserLogin/GetUserById?id={userId}");
                    if (response.IsSuccessStatusCode)
                    {
                        var user = await response.Content.ReadFromJsonAsync<UserDto>();
                        users = new List<UserDto> { user };
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        errorMessage = "Пользователь не найден.";
                        users = new List<UserDto>();
                        NotificationService.ShowError("Пользователь не найден.");
                    }
                    else
                    {
                        errorMessage = "Ошибка при поиске пользователя: " + response.StatusCode;
                        users = new List<UserDto>();
                        NotificationService.ShowError("Ошибка при поиске пользователя.");
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = "Ошибка при поиске пользователя: " + ex.Message;
                    users = new List<UserDto>();
                    NotificationService.ShowError("Ошибка при поиске пользователя.");
                }
                finally
                {
                    isLoading = false;
                    StateHasChanged();
                }
            }
            else
            {
                errorMessage = "Некорректный ID пользователя";
                NotificationService.ShowError("Некорректный ID пользователя.");
            }
        }

    private async Task ResetUserList()
    {
        await LoadUsers();
        searchUserId = string.Empty;
        errorMessage = string.Empty;
    }

    private async Task ChangeUserRole(int userId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await httpClient.PutAsJsonAsync("api/UserLogin/ChangeUserRole", new { UserId = userId });

            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                Console.WriteLine("Роль пользователя успешно изменена.");
                NotificationService.ShowSuccess("Роль пользователя успешно изменена.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Ошибка при изменении роли: {response.StatusCode}. {errorContent}");
                NotificationService.ShowError("Ошибка при изменении роли.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при изменении роли: " + ex.Message);
            NotificationService.ShowError("Ошибка при изменении роли.");
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token) || !IsTokenValid(token))
            {
                token = await RefreshTokenAsync();
                if (string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("Не удалось обновить токен. Перенаправление на страницу входа.");
                    Navigation.NavigateTo("/login");
                    return;
                }
            }
            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var requestBody = new ChangeRoleAndDeleteRequest { UserId = userId };
            var request = new HttpRequestMessage(HttpMethod.Delete, "api/UserLogin/DeleteUser")
                {
                    Content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json")
                };

            var response = await httpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                Console.WriteLine("Пользователь успешно удален.");
                NotificationService.ShowSuccess("Пользователь успешно удален.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Ошибка при удалении пользователя: {response.StatusCode}. {errorContent}");
                NotificationService.ShowError("Ошибка при удалении пользователя.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при удалении пользователя: " + ex.Message);
            NotificationService.ShowError("Ошибка при удалении пользователя.");
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        Navigation.NavigateTo("/login");
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Role { get; set; }
        public string? Email { get; set; }
        public List<string>? Logins { get; set; }
    }

    public class ChangeRoleAndDeleteRequest
    {
        public int UserId { get; set; }
    }

    public class NotificationModel
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Message { get; set; }
        public string Type { get; set; }
    }
}